jamesdanielmarrsritchey: Using Javascript, write a function which inverts the colours of all elements, and text.

GitHub Copilot: ```javascript
// Step-by-step plan:
// 1. Create a function named invertColors.
// 2. Inside the function, select all elements in the document.
// 3. Iterate over each element.
// 4. For each element, get its current background color and text color.
// 5. Invert the colors by calculating the complement of each color component.
// 6. Apply the inverted colors back to the element as its new background and text color.

function invertColors() {
  // Select all elements in the document
  const elements = document.querySelectorAll('*');

  // Function to invert a color
  const invertColor = (color) => {
    // If color is not in RGB format, return it as is (to handle cases like 'transparent')
    if (!color || !color.startsWith('rgb')) return color;
    // Convert RGB color to array of numbers
    let rgb = color.match(/\d+/g).map(Number);
    // Invert each color component
    rgb = rgb.map(c => 255 - c);
    // Return the inverted color in RGB format
    return `rgb(${rgb.join(', ')})`;
  };

  // Iterate over each element
  elements.forEach(el => {
    // Get current styles of the element
    const style = window.getComputedStyle(el);
    // Invert background color
    const backgroundColor = invertColor(style.backgroundColor);
    // Invert color (text color)
    const textColor = invertColor(style.color);
    // Apply the inverted colors
    el.style.backgroundColor = backgroundColor;
    el.style.color = textColor;
  });
}

// Call the function to invert colors
invertColors();
```
This function selects all elements in the document, calculates the inverted color for both the background and text of each element, and applies these inverted colors. Note that this approach might not handle all color formats (e.g., HEX, HSL) and could have unexpected results for images or elements with complex backgrounds.

jamesdanielmarrsritchey: If the colour currently used by the element, or text is not RGB, then don't modify it.

GitHub Copilot: ```javascript
function invertColors() {
  // Select all elements in the document
  const elements = document.querySelectorAll('*');

  // Function to check if color is in RGB format
  const isRgbColor = (color) => color.startsWith('rgb');

  // Function to invert an RGB color
  const invertRgbColor = (color) => {
    // Convert RGB color to array of numbers
    let rgb = color.match(/\d+/g).map(Number);
    // Invert each color component
    rgb = rgb.map(c => 255 - c);
    // Return the inverted color in RGB format
    return `rgb(${rgb.join(', ')})`;
  };

  // Iterate over each element
  elements.forEach(el => {
    // Get current styles of the element
    const style = window.getComputedStyle(el);
    // Check if background color is in RGB format, then invert it
    if (isRgbColor(style.backgroundColor)) {
      const backgroundColor = invertRgbColor(style.backgroundColor);
      el.style.backgroundColor = backgroundColor;
    }
    // Check if text color is in RGB format, then invert it
    if (isRgbColor(style.color)) {
      const textColor = invertRgbColor(style.color);
      el.style.color = textColor;
    }
  });
}

// Call the function to invert colors
invertColors();
```

jamesdanielmarrsritchey: If the color is HEX convert it to RGB, and then invert it.

jamesdanielmarrsritchey: If the color is a HEX convert it to RGB, and then invert it. If the HEX is not compatible, don't convert, or invert it.

GitHub Copilot: ```javascript
function invertColors() {
  // Select all elements in the document
  const elements = document.querySelectorAll('*');

  // Function to convert HEX to RGB
  const hexToRgb = (hex) => {
    // Check for valid HEX format
    if (/^#([0-9A-F]{3}){1,2}$/i.test(hex)) {
      // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
      let fullHex = hex.length === 4 ? '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3] : hex;
      let r = parseInt(fullHex.substring(1, 3), 16);
      let g = parseInt(fullHex.substring(3, 5), 16);
      let b = parseInt(fullHex.substring(5, 7), 16);
      return `rgb(${r}, ${g}, ${b})`;
    }
    // Return null if HEX is not compatible
    return null;
  };

  // Function to invert an RGB color
  const invertRgbColor = (color) => {
    let rgb = color.match(/\d+/g).map(Number);
    rgb = rgb.map(c => 255 - c);
    return `rgb(${rgb.join(', ')})`;
  };

  // Iterate over each element
  elements.forEach(el => {
    // Get current styles of the element
    const style = window.getComputedStyle(el);
    // Initialize variables for background and text colors
    let backgroundColor, textColor;

    // Check if background color is HEX, convert to RGB, then invert
    if (style.backgroundColor.startsWith('#')) {
      const rgb = hexToRgb(style.backgroundColor);
      if (rgb) backgroundColor = invertRgbColor(rgb);
    } else if (style.backgroundColor.startsWith('rgb')) {
      backgroundColor = invertRgbColor(style.backgroundColor);
    }

    // Check if text color is HEX, convert to RGB, then invert
    if (style.color.startsWith('#')) {
      const rgb = hexToRgb(style.color);
      if (rgb) textColor = invertRgbColor(rgb);
    } else if (style.color.startsWith('rgb')) {
      textColor = invertRgbColor(style.color);
    }

    // Apply the inverted colors if they were successfully calculated
    if (backgroundColor) el.style.backgroundColor = backgroundColor;
    if (textColor) el.style.color = textColor;
  });
}

// Call the function to invert colors
invertColors();
```

jamesdanielmarrsritchey: This function might be run more than once on a page, but currently text is only inverting the first time.

GitHub Copilot: ```javascript
function invertColors() {
  const elements = document.querySelectorAll('*');

  const hexToRgb = (hex) => {
    if (/^#([0-9A-F]{3}){1,2}$/i.test(hex)) {
      let fullHex = hex.length === 4 ? '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3] : hex;
      let r = parseInt(fullHex.substring(1, 3), 16);
      let g = parseInt(fullHex.substring(3, 5), 16);
      let b = parseInt(fullHex.substring(5, 7), 16);
      return `rgb(${r}, ${g}, ${b})`;
    }
    return null;
  };

  const invertRgbColor = (color) => {
    let rgb = color.match(/\d+/g).map(Number);
    rgb = rgb.map(c => 255 - c);
    return `rgb(${rgb.join(', ')})`;
  };

  const convertAndInvertColor = (color) => {
    if (color.startsWith('#')) {
      const rgb = hexToRgb(color);
      if (rgb) return invertRgbColor(rgb);
    } else if (color.startsWith('rgb')) {
      return invertRgbColor(color);
    }
    return color;
  };

  elements.forEach(el => {
    const style = window.getComputedStyle(el);
    let backgroundColor = style.backgroundColor;
    let textColor = style.color;

    // Store original colors as custom properties if not already stored
    if (!el.style.getPropertyValue('--original-bg-color')) {
      el.style.setProperty('--original-bg-color', backgroundColor);
    } else {
      // If running again, use the original color for conversion
      backgroundColor = el.style.getPropertyValue('--original-bg-color');
    }

    if (!el.style.getPropertyValue('--original-text-color')) {
      el.style.setProperty('--original-text-color', textColor);
    } else {
      // If running again, use the original color for conversion
      textColor = el.style.getPropertyValue('--original-text-color');
    }

    // Convert and invert colors
    const newBgColor = convertAndInvertColor(backgroundColor);
    const newTextColor = convertAndInvertColor(textColor);

    // Apply the inverted colors
    el.style.backgroundColor = newBgColor;
    el.style.color = newTextColor;
  });
}

invertColors();
```
This updated function stores the original background and text colors of each element as custom properties the first time it runs. On subsequent runs, it retrieves these original colors to invert them again, ensuring that the inversion works correctly even if the function is run multiple times.

jamesdanielmarrsritchey: The function shouldn't need to store the values, because inverting the new values should result in the old ones.

GitHub Copilot: ```javascript
function invertColors() {
  const elements = document.querySelectorAll('*');

  const hexToRgb = (hex) => {
    if (/^#([0-9A-F]{3}){1,2}$/i.test(hex)) {
      let fullHex = hex.length === 4 ? '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3] : hex;
      let r = parseInt(fullHex.substring(1, 3), 16);
      let g = parseInt(fullHex.substring(3, 5), 16);
      let b = parseInt(fullHex.substring(5, 7), 16);
      return `rgb(${r}, ${g}, ${b})`;
    }
    return null;
  };

  const invertRgbColor = (color) => {
    let rgb = color.match(/\d+/g).map(Number);
    rgb = rgb.map(c => 255 - c);
    return `rgb(${rgb.join(', ')})`;
  };

  const convertAndInvertColor = (color) => {
    if (color.startsWith('#')) {
      const rgb = hexToRgb(color);
      if (rgb) return invertRgbColor(rgb);
    } else if (color.startsWith('rgb')) {
      return invertRgbColor(color);
    }
    return color;
  };

  elements.forEach(el => {
    const style = window.getComputedStyle(el);
    let backgroundColor = style.backgroundColor;
    let textColor = style.color;

    // Convert and invert colors
    const newBgColor = convertAndInvertColor(backgroundColor);
    const newTextColor = convertAndInvertColor(textColor);

    // Apply the inverted colors
    el.style.backgroundColor = newBgColor;
    el.style.color = newTextColor;
  });
}

invertColors();
```
This version directly inverts the colors without storing the original values. Since inverting an inverted color should theoretically return it to its original state, this approach should work correctly for multiple invocations on the same page elements.

jamesdanielmarrsritchey: It's working correctly except for the body tag.

GitHub Copilot: ```javascript
function invertColors() {
  const elements = document.querySelectorAll('body, body *');

  const hexToRgb = (hex) => {
    if (/^#([0-9A-F]{3}){1,2}$/i.test(hex)) {
      let fullHex = hex.length === 4 ? '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3] : hex;
      let r = parseInt(fullHex.substring(1, 3), 16);
      let g = parseInt(fullHex.substring(3, 5), 16);
      let b = parseInt(fullHex.substring(5, 7), 16);
      return `rgb(${r}, ${g}, ${b})`;
    }
    return null;
  };

  const invertRgbColor = (color) => {
    let rgb = color.match(/\d+/g).map(Number);
    rgb = rgb.map(c => 255 - c);
    return `rgb(${rgb.join(', ')})`;
  };

  const convertAndInvertColor = (color) => {
    if (color.startsWith('#')) {
      const rgb = hexToRgb(color);
      if (rgb) return invertRgbColor(rgb);
    } else if (color.startsWith('rgb')) {
      return invertRgbColor(color);
    }
    return color;
  };

  elements.forEach(el => {
    const style = window.getComputedStyle(el);
    let backgroundColor = style.backgroundColor;
    let textColor = style.color;

    // Convert and invert colors
    const newBgColor = convertAndInvertColor(backgroundColor);
    const newTextColor = convertAndInvertColor(textColor);

    // Apply the inverted colors
    el.style.backgroundColor = newBgColor;
    el.style.color = newTextColor;
  });
}

invertColors();
```
This function now explicitly includes the `body` tag in its selection, ensuring that the body's background and text colors are also inverted along with those of all other elements within the body.